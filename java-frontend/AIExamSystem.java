import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.lang.reflect.Type;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

/**
 * AI Exam System - Java Frontend
 * --------------------------------
 * This class provides a simple GUI for conducting AI-based exams.
 * It loads questions from a JSON file (generated by the Python script).
 *
 * Features:
 * - Loads questions from JSON (using GSON library).
 * - Displays questions and options in a Swing interface.
 * - Handles user input and answer selection.
 *
 * Author: Your Name
 */

public class AIExamSystem extends JFrame {

    private JLabel questionLabel;
    private JRadioButton optionA, optionB, optionC, optionD;
    private JButton nextButton;
    private ButtonGroup optionsGroup;
    private int currentQuestionIndex = 0;
    private int score = 0;
    private Question[] questions;

    /**
     * Constructor - Initializes the GUI and loads questions.
     */
    public AIExamSystem() {
        setTitle("AI Exam System");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Question display area
        questionLabel = new JLabel("Loading question...");
        questionLabel.setFont(new Font("Arial", Font.BOLD, 16));
        add(questionLabel, BorderLayout.NORTH);

        // Options area
        JPanel optionsPanel = new JPanel();
        optionsPanel.setLayout(new GridLayout(4, 1));
        optionA = new JRadioButton("A");
        optionB = new JRadioButton("B");
        optionC = new JRadioButton("C");
        optionD = new JRadioButton("D");
        optionsGroup = new ButtonGroup();
        optionsGroup.add(optionA);
        optionsGroup.add(optionB);
        optionsGroup.add(optionC);
        optionsGroup.add(optionD);
        optionsPanel.add(optionA);
        optionsPanel.add(optionB);
        optionsPanel.add(optionC);
        optionsPanel.add(optionD);
        add(optionsPanel, BorderLayout.CENTER);

        // Next button
        nextButton = new JButton("Next");
        nextButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (optionsGroup.getSelection() == null) {
                    JOptionPane.showMessageDialog(null, "Please select an answer before proceeding.");
                    return;
                }
                checkAnswer();
                currentQuestionIndex++;
                if (currentQuestionIndex < questions.length) {
                    displayQuestion(currentQuestionIndex);
                } else {
                    showResult();
                }
            }
        });
        add(nextButton, BorderLayout.SOUTH);

        // Load questions from file
        questions = loadQuestions("data/questions_dataset.json");
        if (questions.length > 0) {
            displayQuestion(0);
        } else {
            questionLabel.setText("No questions available.");
            nextButton.setEnabled(false);
        }
    }

    /**
     * Displays a question on the GUI.
     * @param index - Index of the question in the array.
     */
    private void displayQuestion(int index) {
        Question q = questions[index];
        questionLabel.setText("Q" + (index + 1) + ": " + q.getQuestion());
        optionA.setText("A. " + q.getOptions().get("A"));
        optionB.setText("B. " + q.getOptions().get("B"));
        optionC.setText("C. " + q.getOptions().get("C"));
        optionD.setText("D. " + q.getOptions().get("D"));
        optionsGroup.clearSelection();
    }

    /**
     * Checks if the selected answer is correct.
     */
    private void checkAnswer() {
        Question q = questions[currentQuestionIndex];
        String correctAnswer = q.getCorrect();
        if (optionA.isSelected() && correctAnswer.equals("A")) score++;
        if (optionB.isSelected() && correctAnswer.equals("B")) score++;
        if (optionC.isSelected() && correctAnswer.equals("C")) score++;
        if (optionD.isSelected() && correctAnswer.equals("D")) score++;
    }

    /**
     * Displays the final score in a dialog box.
     */
    private void showResult() {
        JOptionPane.showMessageDialog(this, "Exam Finished!\nYour Score: " + score + "/" + questions.length);
        System.exit(0);
    }

    /**
     * Loads questions from a JSON file using GSON.
     * @param fileName - The name of the JSON file.
     * @return Array of Question objects.
     */
    private Question[] loadQuestions(String fileName) {
        try {
            String json = new String(Files.readAllBytes(Paths.get(fileName)));
            Gson gson = new Gson();
            Type questionArrayType = new TypeToken<Question[]>() {}.getType();
            return gson.fromJson(json, questionArrayType);
        } catch (IOException e) {
            e.printStackTrace();
            return new Question[0];
        }
    }

    /**
     * Main method - Entry point.
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new AIExamSystem().setVisible(true));
    }
}

/**
 * Question Class - Represents a quiz question.
 */
class Question {
    private String question;
    private Map<String, String> options;
    private String correct;

    public String getQuestion() {
        return question;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public String getCorrect() {
        return correct;
    }
}
